/*
 * Scala 99 problems
 *
 * Copyright 2021 Peter J. Nuernberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package s399

/** The provided solution to [[P11]]. */
object S11 extends P11 :

  /** The solution to [[P09]] used by [[S10.encode]] by default. */
  given P09 = S09

  /** The solution to [[P10]] used by [[S11.encodeModified]] by default. */
  given P10 = S10

  /**
   * Returns a modified run-length encoding of the given list.
   *
   * This is a fairly straightforward solution.
   * Given the run-length encoding generated by [[P10]], this method keeps each tuple generated by [[P10.encode]],
   * except for tuples that have the form `(1, a)`, which are replaced by `a`.
   * This method does have a different form of default case than previous solutions, which generally use `case _`.
   * In this case, we want to pass through the value that matches this default case.
   * Because `default` starts with a lower-case letter, it's interpreted as a variable name bound to the match instead
   * of a type.
   * If this seems a bit flaky, see [[A111]] for an alternative that doesn't rely on this lower-case convention.
   *
   * We use the solution to `P10` passed in, but we never reference `p09`, a "given" solution to [[P09]], so why is it
   * part of the signature for this function?
   * Recall that [[P10.encode]] needs an implementation of `P09` to work.
   * We do not need to pass it explicitly to `encode`, but we could -- see [[A211]].
   *
   * Finally, why isn't this method parameterized?
   * We certainly do know the type of element in the list being passed in, so it mighht make sense to declare this
   * method as `def encodeModified[A](as: List[A])(using ...): Result[List[_]]`.
   * The problem is that the return type will still be `Result[List[_]]`, so there's not much gain from parameterizing
   * the function call.
   */
  override def encodeModified(l: List[_])(using p09: P09, p10: P10): Result[List[_]] =
    p10.encode(l).map(
      _.map {
        case (1, a) => a
        case default => default
      })

  /** A main method that executes the provided solution above on the sample input. */
  @main def s11main: Unit = println(encodeModified(List(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5)))

// === ALTERNATE SOLUTION 1 ===

/** The first alternate solution to [[P11]]. */
object A111 extends P11 :

  /** The solution to [[P09]] used by [[P10s.encode]] by default. */
  given P09 = S09

  /** The solution to [[P10]] used by [[P11s.encodeModified]] by default. */
  given P10 = S10

  /**
   * Returns a modified run-length encoding of the given list.
   *
   * An alternative that doesn't rely on the lower-case convention.
   */
  override def encodeModified(l: List[_])(using p09: P09, p10: P10): Result[List[_]] =
    p10.encode(l).map(
      _.map {
        case (1, a) => a
        case default @ _ => default
      })

  /** A main method that executes the first alternate solution above on the sample input. */
  @main def a111main: Unit = println(encodeModified(List(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5)))

// === ALTERNATE SOLUTION 2 ===

/** The second alternate solution to [[P11]]. */
object A211 extends P11 :

  /** The solution to [[P09]] used by [[P10s.encode]] by default. */
  given P09 = S09

  /** The solution to [[P10]] used by [[P11s.encodeModified]] by default. */
  given P10 = S10

  /**
   * Returns a modified run-length encoding of the given list.
   *
   * An alternative that is more explicit about the `p09` parameter.
   */
  override def encodeModified(l: List[_])(using p09: P09, p10: P10): Result[List[_]] =
    p10.encode(l)(using p09).map(
      _.map {
        case (1, a) => a
        case default => default
      })

  /** A main method that executes the second alternate solution above on the sample input. */
  @main def a211main: Unit = println(encodeModified(List(1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5)))
